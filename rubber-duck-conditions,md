# Claude's Rubber Duck Trigger Guide ğŸ¦†

## When Claude Should Say "Let me check with Gemini..."

### ğŸŸ¡ Uncertainty Triggers (Confidence < 85%)

Claude should rubber duck when:

1. **Multiple Valid Approaches**
   - "Both approach A and B could work, but I'm not certain which is better for this specific case"
   - "There are trade-offs I need to think through more carefully"

2. **Edge Cases Uncertainty**
   - "This should work in most cases, but I'm not 100% sure about [specific scenario]"
   - "There might be corner cases I'm not considering"

3. **Performance Implications**
   - "This solution works, but I'm uncertain about performance at scale"
   - "The Big-O is clear, but real-world performance depends on factors I'm unsure about"

4. **Best Practices Ambiguity**
   - "The community seems divided on this pattern"
   - "This used to be best practice, but I'm not certain if it still is"

### ğŸ”´ Complexity Triggers

Always rubber duck for:

1. **Distributed Systems Issues**
   - Race conditions across services
   - Distributed transaction patterns
   - Consistency vs availability trade-offs

2. **Security Implications**
   - Authentication/authorization architectures
   - Cryptographic implementations
   - Security vs usability balance

3. **Architecture Decisions**
   - Microservices vs monolith for specific cases
   - Event-driven vs request-response
   - Database architecture choices

4. **Non-Deterministic Bugs**
   - "Works on my machine" issues
   - Intermittent failures
   - Timing-dependent problems

### ğŸŸ¢ Pattern Recognition Triggers

Use rubber duck when Claude notices:

1. **Conflicting Requirements**
   - "The user wants both X and Y, but they seem mutually exclusive"
   - "These constraints might make the solution impossible"

2. **Hidden Complexity**
   - "This seems simple but I sense hidden complications"
   - "The user might not realize the implications of this choice"

3. **Cross-Domain Problems**
   - Issues spanning multiple expertise areas
   - Problems requiring both deep and broad knowledge

## Example Claude Rubber Duck Starters

### For Technical Uncertainty
```
"I'm analyzing this concurrency issue, but I'd like to verify my understanding. 
Let me consult with Gemini about:
- Whether my race condition analysis is correct
- If there are standard patterns I'm overlooking
- Whether the proposed fix might introduce new issues"
```

### for Architectural Decisions
```
"This architectural decision has several valid approaches. Let me discuss with Gemini:
- The trade-offs I'm seeing
- Similar systems they've analyzed
- Potential future implications I might be missing"
```

### For Complex Debugging
```
"This bug pattern is unusual. Let me rubber duck with Gemini about:
- Whether my root cause analysis makes sense
- What other causes could produce these symptoms
- Debugging strategies I haven't considered"
```

## Benefits of Claude Being Proactive

When Claude proactively uses rubber duck mode:

1. **User Trust** - "Claude knows when to get a second opinion"
2. **Better Answers** - Two perspectives synthesized
3. **Learning** - User sees how experts collaborate
4. **Transparency** - Uncertainty is acknowledged, not hidden

## The Collaboration Flow

```
1. Claude recognizes uncertainty/complexity
2. Claude: "This is intricate. Let me think through this with Gemini..."
3. Claude formulates specific questions
4. Gemini provides fresh perspective
5. Claude synthesizes and presents unified recommendation
6. User gets best of both agents
```

## Quick Decision Tree

```
Is Claude uncertain about the answer?
â”œâ”€ YES â†’ Rubber duck with Gemini
â”‚   â”œâ”€ Multiple valid approaches? â†’ Discuss trade-offs
â”‚   â”œâ”€ Edge cases unclear? â†’ Explore scenarios
â”‚   â””â”€ Best practice ambiguous? â†’ Compare experiences
â”‚
â””â”€ NO â†’ Is it highly complex?
    â”œâ”€ YES â†’ Rubber duck for verification
    â”‚   â”œâ”€ Distributed systems? â†’ Verify approach
    â”‚   â”œâ”€ Security critical? â†’ Double-check
    â”‚   â””â”€ Architecture decision? â†’ Get second opinion
    â”‚
    â””â”€ NO â†’ Proceed with confidence
```

Remember: It's better to say "Let me verify this with Gemini" than to be confidently wrong! ğŸ¦†âœ¨